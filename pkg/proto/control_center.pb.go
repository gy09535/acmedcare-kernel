// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/control_center.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HeartBeat struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	SuccessCount         int32    `protobuf:"varint,2,opt,name=successCount,proto3" json:"successCount,omitempty"`
	FailCount            int32    `protobuf:"varint,3,opt,name=failCount,proto3" json:"failCount,omitempty"`
	Ip                   string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	CurrentTime          int64    `protobuf:"varint,5,opt,name=currentTime,proto3" json:"currentTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8a7e87b6308b621, []int{0}
}

func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HeartBeat) GetSuccessCount() int32 {
	if m != nil {
		return m.SuccessCount
	}
	return 0
}

func (m *HeartBeat) GetFailCount() int32 {
	if m != nil {
		return m.FailCount
	}
	return 0
}

func (m *HeartBeat) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HeartBeat) GetCurrentTime() int64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

type Result struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8a7e87b6308b621, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8a7e87b6308b621, []int{2}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Service) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterType((*HeartBeat)(nil), "com.acmedcare.framework.devops.endpoint.center.HeartBeat")
	proto.RegisterType((*Result)(nil), "com.acmedcare.framework.devops.endpoint.center.Result")
	proto.RegisterType((*Service)(nil), "com.acmedcare.framework.devops.endpoint.center.Service")
}

func init() { proto.RegisterFile("proto/control_center.proto", fileDescriptor_b8a7e87b6308b621) }

var fileDescriptor_b8a7e87b6308b621 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x4e, 0xe3, 0x40,
	0x10, 0xc6, 0xcf, 0xce, 0xbf, 0xf3, 0xe4, 0x74, 0x77, 0xda, 0xca, 0x8a, 0x28, 0x2c, 0x57, 0xa9,
	0x36, 0x12, 0x48, 0x41, 0x74, 0x90, 0x50, 0x50, 0x41, 0x64, 0xe8, 0xd1, 0xb2, 0x9e, 0x20, 0x0b,
	0x7b, 0x77, 0x35, 0xbb, 0x0e, 0x2f, 0x80, 0x78, 0x0f, 0x78, 0x52, 0xe4, 0x75, 0xfe, 0x51, 0x9a,
	0x6e, 0xfc, 0x79, 0xbe, 0x99, 0x9f, 0x3f, 0x0f, 0x4c, 0x0c, 0x69, 0xa7, 0x67, 0x52, 0x2b, 0x47,
	0xba, 0x7c, 0x94, 0xa8, 0x1c, 0x12, 0xf7, 0x22, 0xe3, 0x52, 0x57, 0x5c, 0xc8, 0x0a, 0x73, 0x29,
	0x08, 0xf9, 0x9a, 0x44, 0x85, 0xaf, 0x9a, 0x5e, 0x78, 0x8e, 0x1b, 0x6d, 0x2c, 0x47, 0x95, 0x1b,
	0x5d, 0x28, 0xc7, 0x5b, 0x57, 0xfa, 0x11, 0x40, 0x74, 0x83, 0x82, 0xdc, 0x02, 0x85, 0x63, 0x09,
	0x8c, 0x2d, 0xd2, 0xa6, 0x90, 0x78, 0x2b, 0x2a, 0x8c, 0x83, 0x24, 0x98, 0x46, 0xd9, 0xb1, 0xc4,
	0x52, 0xf8, 0x63, 0x6b, 0x29, 0xd1, 0xda, 0xa5, 0xae, 0x95, 0x8b, 0xc3, 0x24, 0x98, 0x0e, 0xb2,
	0x6f, 0x1a, 0x3b, 0x81, 0x68, 0x2d, 0x8a, 0xb2, 0x6d, 0xe8, 0xf9, 0x86, 0x83, 0xc0, 0xfe, 0x42,
	0x58, 0x98, 0xb8, 0xef, 0x47, 0x87, 0x85, 0x69, 0x76, 0xca, 0x9a, 0x08, 0x95, 0x7b, 0x28, 0x2a,
	0x8c, 0x07, 0x49, 0x30, 0xed, 0x65, 0xc7, 0x52, 0x3a, 0x87, 0x61, 0x86, 0xb6, 0x2e, 0x1d, 0x8b,
	0x61, 0xb4, 0xdd, 0xe4, 0xd9, 0x7e, 0x67, 0xbb, 0x47, 0xc6, 0xa0, 0x9f, 0x0b, 0x27, 0x3c, 0x4f,
	0x94, 0xf9, 0x3a, 0xbd, 0x82, 0xd1, 0x7d, 0x8b, 0xde, 0xbc, 0x56, 0x87, 0x2f, 0xf2, 0xf5, 0x16,
	0x24, 0xdc, 0x83, 0x30, 0xe8, 0x1b, 0x4d, 0x2d, 0x71, 0x94, 0xf9, 0xfa, 0xf4, 0x33, 0x84, 0xff,
	0xcb, 0x36, 0xe7, 0x12, 0x69, 0xe9, 0x33, 0x63, 0x6f, 0x01, 0xfc, 0x23, 0x7c, 0x2e, 0xac, 0x43,
	0xda, 0x2d, 0x38, 0xef, 0x18, 0x3c, 0xdf, 0x1a, 0x27, 0xf3, 0xae, 0xc6, 0x36, 0x8a, 0xf4, 0x17,
	0x7b, 0xf7, 0x18, 0x0d, 0xe6, 0xe1, 0x07, 0x5e, 0x74, 0x9d, 0xb6, 0xb7, 0xfe, 0x1c, 0x64, 0x71,
	0x09, 0xb3, 0xa4, 0x9b, 0x77, 0x31, 0xbe, 0xc6, 0xcd, 0x9d, 0xb1, 0xab, 0xe6, 0x66, 0x57, 0xc1,
	0xd3, 0xd0, 0x1f, 0xef, 0xd9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x14, 0xa5, 0x76, 0xda,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerCenterClient is the client API for ControllerCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerCenterClient interface {
	// Sends a greeting
	RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Result, error)
	ReportHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Result, error)
}

type controllerCenterClient struct {
	cc *grpc.ClientConn
}

func NewControllerCenterClient(cc *grpc.ClientConn) ControllerCenterClient {
	return &controllerCenterClient{cc}
}

func (c *controllerCenterClient) RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/com.acmedcare.framework.devops.endpoint.center.ControllerCenter/registerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCenterClient) ReportHeartBeat(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/com.acmedcare.framework.devops.endpoint.center.ControllerCenter/reportHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerCenterServer is the server API for ControllerCenter service.
type ControllerCenterServer interface {
	// Sends a greeting
	RegisterService(context.Context, *Service) (*Result, error)
	ReportHeartBeat(context.Context, *HeartBeat) (*Result, error)
}

// UnimplementedControllerCenterServer can be embedded to have forward compatible implementations.
type UnimplementedControllerCenterServer struct {
}

func (*UnimplementedControllerCenterServer) RegisterService(ctx context.Context, req *Service) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (*UnimplementedControllerCenterServer) ReportHeartBeat(ctx context.Context, req *HeartBeat) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHeartBeat not implemented")
}

func RegisterControllerCenterServer(s *grpc.Server, srv ControllerCenterServer) {
	s.RegisterService(&_ControllerCenter_serviceDesc, srv)
}

func _ControllerCenter_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCenterServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.acmedcare.framework.devops.endpoint.center.ControllerCenter/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCenterServer).RegisterService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCenter_ReportHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCenterServer).ReportHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.acmedcare.framework.devops.endpoint.center.ControllerCenter/ReportHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCenterServer).ReportHeartBeat(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.acmedcare.framework.devops.endpoint.center.ControllerCenter",
	HandlerType: (*ControllerCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerService",
			Handler:    _ControllerCenter_RegisterService_Handler,
		},
		{
			MethodName: "reportHeartBeat",
			Handler:    _ControllerCenter_ReportHeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_center.proto",
}
